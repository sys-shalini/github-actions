name: Tag Dispatch with semver

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to push the tag'
        required: true
        type: choice
        options:
          - main
          - feature
      version_type:
        description: 'Type of version increment (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  tag-dispatch:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}
          submodules: true

      - name: Set up Git
        run: |
          git config --global user.name 'sys-shalini'
          git config --global user.email 'shalini.s@sysfore.com'

      - name: Fetch tags
        run: git fetch --tags

      - name: Get Latest Tags
        id: get_latest_tags
        run: |
          # Get latest major, minor, and patch tags
          latest_major_tag=$(git tag -l "main_v[0-9]*.[0-9]*.[0-9]*" | sort -V --reverse | sed -n 1p)
          latest_minor_tag=$(git tag -l "main_v${latest_major_tag##main_v*}" | sort -V --reverse | sed -n 1p)
          latest_patch_tag=$(git tag -l "main_v${latest_minor_tag##main_v*}" | sort -V --reverse | sed -n 1p)

          echo "::set-output name=latest_major_tag::${latest_major_tag}"
          echo "::set-output name=latest_minor_tag::${latest_minor_tag}"
          echo "::set-output name=latest_patch_tag::${latest_patch_tag}"

      - name: Increment Tag
        id: increment_tag
        run: |
          latest_major_tag=${{ steps.get_latest_tags.outputs.latest_major_tag }}
          latest_minor_tag=${{ steps.get_latest_tags.outputs.latest_minor_tag }}
          latest_patch_tag=${{ steps.get_latest_tags.outputs.latest_patch_tag }}
          version_type=${{ github.event.inputs.version_type }}

          # Extract major, minor, and patch from latest_major_tag
          major="${latest_major_tag##main_v}"
          major="${major%%.*}"
          minor="${latest_minor_tag##main_v${major}.}"
          minor="${minor%%.*}"
          patch="${latest_patch_tag##main_v${major}.${minor}.}"

          case $version_type in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          new_tag="main_v${major}.${minor}.${patch}"
          echo "Next tag: $new_tag"
          echo "::set-output name=next_tag::$new_tag"

      - name: Push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          new_tag=${{ steps.increment_tag.outputs.next_tag }}
          git tag $new_tag
          git push origin $new_tag

      # - name: Create GitHub Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PAT }}
      #   with:
      #     tag_name: ${{ steps.increment_tag.outputs.next_tag }}
      #     release_name: ${{ steps.increment_tag.outputs.next_tag }}
      #     body: 'Description of the release'
      #     draft: false
      #     prerelease: false
