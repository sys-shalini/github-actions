name: Tag Dispatch with semver

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to push the tag'
        required: true
        type: choice
        options:
          - main
          - feature
      version_type:
        description: 'Type of version increment (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  tag-dispatch:
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.branch }}
        submodules: true
    
    - name: Set up Git
      run: |
        git config --global user.name 'sys-shalini'
        git config --global user.email 'shalini.s@sysfore.com'

    - name: Fetch tags
      run: git fetch --tags
    
    - name: Get Latest Tags
      id: get_latest_tags
      run: |
        # Extract tags and sort them
        tags=$(git tag -l "main_*" | sort -V)

        # Initialize variables to store latest tags for major, minor, and patch versions
        latest_major_tag=""
        latest_minor_tag=""
        latest_patch_tag=""

        # Initialize variables for the highest major, minor, and patch versions
        latest_major_version=-1
        latest_minor_version=-1
        latest_patch_version=-1

        # Loop through tags and identify the latest for each version type
        for tag in $tags; do
          version="${tag#main_}"
          version="${version#v}"  # Remove 'v' if it exists in the version part
          IFS='.' read -r -a version_parts <<< "$version"
          
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          # Determine the latest major tag
          if [[ "$major" -gt "$latest_major_version" ]]; then
            latest_major_version=$major
            latest_major_tag=$tag
          fi

          # Determine the latest minor tag within the same major version
          if [[ "$major" -eq "$latest_major_version" && "$minor" -gt "$latest_minor_version" ]]; then
            latest_minor_version=$minor
            latest_minor_tag=$tag
          fi

          # Determine the latest patch tag within the same major and minor version
          if [[ "$major" -eq "$latest_major_version" && "$minor" -eq "$latest_minor_version" && "$patch" -gt "$latest_patch_version" ]]; then
            latest_patch_version=$patch
            latest_patch_tag=$tag
          fi
        done

        # Use default v0.0.0 if no tags are found
        if [[ -z "$latest_major_tag" ]]; then
          latest_major_tag="main_v0.0.0"
        fi
        if [[ -z "$latest_minor_tag" ]]; then
          latest_minor_tag="main_v0.0.0"
        fi
        if [[ -z "$latest_patch_tag" ]]; then
          latest_patch_tag="main_v0.0.0"
        fi

        echo "Latest Major Tag: $latest_major_tag"
        echo "Latest Minor Tag: $latest_minor_tag"
        echo "Latest Patch Tag: $latest_patch_tag"

        # Set outputs
        echo "::set-output name=latest_major_tag::$latest_major_tag"
        echo "::set-output name=latest_minor_tag::$latest_minor_tag"
        echo "::set-output name=latest_patch_tag::$latest_patch_tag"

    - name: Increment Tag
      id: increment_tag
      run: |
        version_type=${{ github.event.inputs.version_type }}
        
        # Determine the latest tag based on version type
        case $version_type in
          major)
            latest_tag=${{ steps.get_latest_tags.outputs.latest_major_tag }}
            ;;
          minor)
            latest_tag=${{ steps.get_latest_tags.outputs.latest_minor_tag }}
            ;;
          patch)
            latest_tag=${{ steps.get_latest_tags.outputs.latest_patch_tag }}
            ;;
        esac

        # Extract the prefix and version number
        prefix="main_"
        version="${latest_tag#main_}"
        version="${version#v}"  # Remove 'v' if it exists in the version part

        IFS='.' read -r -a version_parts <<< "$version"

        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=${version_parts[2]}

        case $version_type in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            new_tag="${prefix}v${major}.${minor}.${patch}"
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            new_tag="${prefix}${major}.${minor}.${patch}"
            ;;
          patch)
            patch=$((patch + 1))
            new_tag="${prefix}${major}.${minor}.${patch}"
            ;;
        esac

        echo "Next tag: $new_tag"
        echo "::set-output name=next_tag::$new_tag"
        
    - name: Push new tag
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      run: |
        new_tag=${{ steps.increment_tag.outputs.next_tag }}
        git tag $new_tag
        git push origin $new_tag

    # - name: Create GitHub Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.PAT }}
    #   with:
    #       tag_name: ${{ steps.increment_tag.outputs.next_tag }}
    #       release_name: ${{ steps.increment_tag.outputs.next_tag }}
    #       body: 'Description of the release'
    #       draft: false
    #       prerelease: false
